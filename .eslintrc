---
  env:
    node: true
    browser: true
  rules:
    #disallow or enforce trailing commas (recommended)
    comma-dangle:
      - 1
      - always-multiline
    #disallow assignment in conditional expressions (recommended)
    no-cond-assign: 1
    #disallow use of console in the node environment (recommended)
    no-console: 0
    #disallow use of constant expressions in conditions (recommended)
    no-constant-condition: 1
    #disallow control characters in regular expressions (recommended)
    no-control-regex: 1
    #disallow use of debugger (recommended)
    no-debugger: 0
    #disallow duplicate arguments in functions (recommended)
    no-dupe-args: 2
    #disallow duplicate keys when creating object literals (recommended)
    no-dupe-keys: 2
    #disallow a duplicate case label. (recommended)
    no-duplicate-case: 2
    #disallow the use of empty character classes in regular expressions (recommended)
    no-empty-character-class: 2
    #disallow empty statements (recommended)
    no-empty: 1
    #disallow assigning to the exception in a catch block (recommended)
    no-ex-assign: 1
    #disallow double-negation boolean casts in a boolean context (recommended)
    no-extra-boolean-cast: 1
    #disallow unnecessary parentheses
    no-extra-parens: 1
    #disallow unnecessary semicolons (recommended)
    no-extra-semi: 2
    #disallow overwriting functions written as function declarations (recommended)
    no-func-assign: 2
    #disallow function or variable declarations in nested blocks (recommended)
    no-inner-declarations: 2
    #disallow invalid regular expression strings in the RegExp constructor (recommended)
    no-invalid-regexp: 2
    #disallow irregular whitespace outside of strings and comments (recommended)
    no-irregular-whitespace: 1
    #disallow negation of the left operand of an in expression (recommended)
    no-negated-in-lhs: 1
    #disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    no-obj-calls: 0
    #disallow multiple spaces in a regular expression literal (recommended)
    no-regex-spaces: 1
    #disallow sparse arrays (recommended)
    no-sparse-arrays: 1
    #disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    no-unreachable: 2
    #disallow comparisons with the value NaN (recommended)
    use-isnan: 2
    #Ensure JSDoc comments are valid
    valid-jsdoc: 0
    #Ensure that the results of typeof are compared against a valid string (recommended)
    valid-typeof: 1
    #Avoid code that looks like two expressions but is actually one
    no-unexpected-multiline: 1

    #Enforces getter/setter pairs in objects
    accessor-pairs: 1
    #treat var statements as if they were block scoped
    block-scoped-var: 0
    #specify the maximum cyclomatic complexity allowed in a program
    complexity: 0
    #require return statements to either always or never specify values
    consistent-return: 0
    #specify curly brace conventions for all control statements
    curly:
      - 2
      - multi-line
    #require default case in switch statements
    default-case: 1
    #encourages use of dot notation whenever possible
    dot-notation: 2
    #enforces consistent newlines before or after dots
    dot-location:
      - 1
      - property
    #require the use of === and !==
    eqeqeq: 1
    #make sure for-in loops have an if statement
    guard-for-in: 0
    #disallow the use of alert, confirm, and prompt
    no-alert: 2
    #disallow use of arguments.caller or arguments.callee
    no-caller: 2
    #disallow division operators explicitly at beginning of regular expression
    no-div-regex: 2
    #disallow else after a return in an if
    no-else-return: 1
    #disallow use of labels for anything other than loops and switches
    no-empty-label: 2
    #disallow comparisons to null without a type-checking operator
    no-eq-null: 2
    #disallow use of eval()
    no-eval: 2
    #disallow adding to native types
    no-extend-native: 2
    #disallow unnecessary function binding
    no-extra-bind: 2
    #disallow fallthrough of case statements (recommended)
    no-fallthrough: 1
    #disallow the use of leading or trailing decimal points in numeric literals
    no-floating-decimal: 1
    #disallow the type conversions with shorter notations
    no-implicit-coercion: 2
    #disallow use of eval()-like methods
    no-implied-eval: 2
    #disallow this keywords outside of classes or class-like objects
    no-invalid-this: 1
    #disallow usage of __iterator__ property
    no-iterator: 0
    #disallow use of labeled statements
    no-labels: 0
    #disallow unnecessary nested blocks
    no-lone-blocks: 1
    #disallow creation of functions within loops
    no-loop-func: 1
    #disallow use of multiple spaces
    no-multi-spaces: 0
    #disallow use of multiline strings
    no-multi-str: 0
    #disallow reassignments of native objects
    no-native-reassign: 2
    #disallow use of new operator for Function object
    no-new-func: 2
    #disallows creating new instances of String, Number, and Boolean
    no-new-wrappers: 2
    #disallow use of the new operator when not part of an assignment or comparison
    no-new: 2
    #disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-octal-escape: 2
    #disallow use of octal literals (recommended)
    no-octal: 1
    #disallow reassignment of function parameters
    no-param-reassign: 1
    #disallow use of process.env
    no-process-env: 0
    #disallow usage of __proto__ property
    no-proto: 0
    #disallow declaring the same variable more than once (recommended)
    no-redeclare: 2
    #disallow use of assignment in return statement
    no-return-assign: 1
    #disallow use of javascript: urls.
    no-script-url: 2
    #disallow comparisons where both sides are exactly the same
    no-self-compare: 1
    #disallow use of the comma operator
    no-sequences: 2
    #restrict what can be thrown as an exception
    no-throw-literal: 2
    #disallow usage of expressions in statement position
    no-unused-expressions: 1
    #disallow unnecessary .call() and .apply()
    no-useless-call: 1
    #disallow use of the void operator
    no-void: 2
    #disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    no-warning-comments:
      - 1
      -
        terms:
          - todo
          - fixme
        location: start
    #disallow use of the with statement
    no-with: 2
    #require use of the second argument for parseInt()
    radix: 1
    #require declaration of all vars at the top of their containing scope
    vars-on-top: 0
    #require immediate function invocation to be wrapped in parentheses
    wrap-iife: 1
    #require or disallow Yoda conditions
    yoda: 1


    strict:
      - 2
      - global


    #enforce or disallow variable initializations at definition
    init-declarations: 0
    #disallow the catch clause parameter name being the same as a variable in the outer scope
    no-catch-shadow: 1
    #disallow deletion of variables (recommended)
    no-delete-var: 1
    #disallow labels that share a name with a variable
    no-label-var: 2
    #disallow shadowing of names such as arguments
    no-shadow-restricted-names: 2
    #disallow declaration of variables already declared in the outer scope
    no-shadow: 1
    #disallow use of undefined when initializing variables
    no-undef-init: 1
    #disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    no-undef: 0
    #disallow use of undefined variable
    no-undefined: 1
    #disallow declaration of variables that are not used in the code (recommended)
    no-unused-vars: 1
    #disallow use of variables before they are defined
    no-use-before-define: 2

    #enforce return after a callback (dumb that it takes a list of names but still useful)
    callback-return:
      - 2
      -
        - callback
        - cb
        - next
    #enforce error handling in callbacks
    handle-callback-err: 1
    #disallow mixing regular variable and require declarations
    no-mixed-requires: 0
    #disallow use of new operator with the require function
    no-new-require: 2
    #disallow string concatenation with __dirname and __filename
    no-path-concat: 2
    #disallow process.exit()
    no-process-exit: 1
    #restrict usage of specified node modules
    no-restricted-modules: 0
    #disallow use of synchronous methods
    no-sync: 1

    #enforce spacing inside array brackets
    array-bracket-spacing:
     - 1
     - never
    #enforce one true brace style
    brace-style:
      - 1
      - 1tbs
    #require camel case names
    camelcase: 1
    #enforce spacing before and after comma
    comma-spacing:
      - 1
      -
        before: false
        after: true
    #enforce one true comma style
    comma-style:
      - 1
      - last
    #require or disallow padding inside computed properties
    computed-property-spacing:
      - 1
      - never
    #enforce consistent naming when capturing the current execution context
    consistent-this:
      - 1
      - self
    #enforce newline at the end of file with no multiple empty lines
    eol-last: 2
    #require function expressions to have a name
    func-names: 2
    #enforce use of function declarations or expressions
    func-style: 0
    #this option enforces minimum and maximum identifier lengths (variable names property names etc.) (off by default)
    id-length: 0
    #require identifiers to match the provided regular expression
    id-match: 0
    #specify tab or space width for your code
    indent:
      - 2
      - 2
    #enforce spacing between keys and values in object literal properties
    key-spacing:
      - 1
      -
        beforeColon: false
        afterColon: true
    #enforce empty lines around comments
    lines-around-comment:
      - 1
      -
        beforeBlockComment: true
    #disallow mixed 'LF' and 'CRLF' as linebreaks
    linebreak-style: 1
    #specify the maximum depth callbacks can be nested
    max-nested-callbacks: 0
    #require a capital letter for constructors
    new-cap: 1
    #disallow the omission of parentheses when invoking a constructor with no arguments
    new-parens: 2
    #require or disallow an empty newline after variable declarations
    newline-after-var: 0
    #disallow use of the Array constructor
    no-array-constructor: 2
    #disallow use of the continue statement
    no-continue: 0
    #disallow comments inline after code
    no-inline-comments: 0
    #disallow if as the only statement in an else block
    no-lonely-if: 1
    #disallow mixed spaces and tabs for indentation (recommended)
    no-mixed-spaces-and-tabs: 2
    #disallow multiple empty lines
    no-multiple-empty-lines: 1
    #disallow nested ternary expressions
    no-nested-ternary: 2
    #disallow the use of the Object constructor
    no-new-object: 2
    #disallow space between function identifier and application
    no-spaced-func: 2
    #disallow the use of ternary operators
    no-ternary: 0
    #disallow trailing whitespace at the end of lines
    no-trailing-spaces: 2
    #disallow dangling underscores in identifiers
    no-underscore-dangle: 1
    #disallow the use of Boolean literals in conditional expressions
    no-unneeded-ternary: 1
    #require or disallow padding inside curly braces
    object-curly-spacing:
      - 1
      - always
    #require or disallow one variable declaration per function
    one-var: 0
    #require assignment operator shorthand where possible or prohibit it entirely
    operator-assignment:
      - 1
      - always
    #enforce operators to be placed before or after line breaks
    operator-linebreak:
      - 1
      - after
    #enforce padding within blocks
    padded-blocks: 0
    #require quotes around object literal property names
    quote-props:
      - 1
      - as-needed
    #specify whether backticks double or single quotes should be used
    quotes:
      - 2
      - single
      - avoid-escape
    #enforce spacing before and after semicolons
    semi-spacing:
      - 1
      -
        before: false
        after: true
    #require or disallow use of semicolons instead of ASI
    semi:
      - 1
      - always
    #sort variables within the same declaration block
    sort-vars:
      - 1
      -
        ignoreCase: false
    #require a space after certain keywords
    space-after-keywords:
      - 2
      - always
    #require or disallow a space before blocks
    space-before-blocks:
      - 2
      - always
    #require or disallow a space before function opening parenthesis
    space-before-function-paren:
      - 2
      - never
    #require or disallow spaces inside parentheses
    space-in-parens: 0
    #require spaces around operators
    space-infix-ops: 0
    #require a space after return throw and case
    space-return-throw-case: 0
    #require or disallow spaces before/after unary operators
    space-unary-ops: 0
    #require or disallow a space immediately following the # or // in a comment
    spaced-comment:
      - 2
      - always
    #require regex literals to be wrapped in parentheses
    wrap-regex: 0
